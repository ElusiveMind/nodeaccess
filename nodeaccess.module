<?php

/**
 * @file
 * Control access to site content based on the users and roles.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\user\RoleInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\node\NodeTypeInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\node\NodeInterface;
use Drupal\node\Entity\NodeType;
use Drupal\node\Entity\Node;
use Drupal\Core\Cache\Cache;

/**
 * Implements hook_help().
 */
function nodeaccess_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.nodeaccess':
      return t("You can set grants for individual users. Enter a name or a partial name in the box and click Search or press return. You must check the 'Keep?' checkbox if you want to keep the user for granting. Note that user grants are in addition to those coming from roles.");
  }
}

/**
 * Implements hook_node_access_records().
 */
function nodeaccess_node_access_records(NodeInterface $node) {
  $db = \Drupal::database();
  $settings = \Drupal::configFactory()->get('nodeaccess.settings');
  $bundle = $node->getType();

  // Need to find out if node has own grants or whether to use defaults.
  $default = $settings->get($bundle);
  $roles_gids = $settings->get('role_map');
  $roles_gids = array_flip($roles_gids);

  $nid = $node->id();
  $grants = [];

  // Setup default keys that are required by node_access_write_grants().
  $grant_defaults = [
    'nid' => $nid,
    'gid' => 0,
    'realm' => 'nodeaccess_rid',
    'grant_view' => 0,
    'grant_update' => 0,
    'grant_delete' => 0,
  ];

  $entries = $db->select('nodeaccess_nodes_enabled', 'n')
    ->fields('n')
    ->condition('nid', $node->id(), '=')
    ->execute()
    ->fetchAll();
  $enabled = (count($entries) > 0) ? TRUE : FALSE;

  if ($enabled === FALSE) {
    if ($node->isPublished()) {
      $role_perms = user_role_permissions([RoleInterface::ANONYMOUS_ID, RoleInterface::AUTHENTICATED_ID]);
      // Anonymous user setting.
      $grants[] = [
        'gid' => $roles_gids[RoleInterface::ANONYMOUS_ID],
        'grant_view' => in_array('access content', $role_perms[RoleInterface::ANONYMOUS_ID]),
      ];
      // Authenticated user setting.
      $grants[] = [
        'gid' => $roles_gids[RoleInterface::AUTHENTICATED_ID],
        'grant_view' => in_array('access content', $role_perms[RoleInterface::AUTHENTICATED_ID]),
      ];
    }
  }
  else {
    $entries = $db->select('nodeaccess', 'n')
      ->fields('n')
      ->condition('nid', $nid, '=')
      ->execute()
      ->fetchAll();
    $node_count = count($entries);

    if ($node_count < 1 || $enabled === FALSE) {
      /**
       * If the node has no grants of its own, make it available to anonymous
       * and authenticated if they have permissions properly configured. We do
       * not use default grants outside of the node grants being enabled on a
       * per node basis.
       */
      if ($node->isPublished()) {
        $i = 0;
        foreach ($default as $key => $val) {
          if ($key != 'author') {
            $rid = $roles_gids[$key];
            $grants[$i] = $default[$key];
            $grants[$i]['gid'] = $rid;
            $i++;
          }
        }
      }
      else {
        // Otherwise, check access to unpublished content for authenticated and
        // anonymous users.
        $role_perms = user_role_permissions([RoleInterface::ANONYMOUS_ID, RoleInterface::AUTHENTICATED_ID]);
        // Anonymous user setting.
        $grants[] = [
          'gid' => $roles_gids[RoleInterface::ANONYMOUS_ID],
          'grant_view' => in_array('bypass node access', $role_perms[RoleInterface::ANONYMOUS_ID]),
        ];
        // Authenticated user setting.
        $grants[] = [
          'gid' => $roles_gids[RoleInterface::AUTHENTICATED_ID],
          'grant_view' => in_array('bypass node access', $role_perms[RoleInterface::AUTHENTICATED_ID]),
        ];
      }
    }
    else {
      // Node has own grants, use them.
      $entries = $db->select('nodeaccess', 'n')
        ->fields('n')
        ->condition('nid', $nid, '=')
        ->execute()
        ->fetchAll();

      $grants = [];
      foreach ($entries as $row) {
        $grants[] = [
          'gid' => $row->gid,
          'realm' => $row->realm,
          'grant_view' => $row->grant_view,
          'grant_update' => $row->grant_update,
          'grant_delete' => $row->grant_delete,
        ];
      }
    }
    // Apply author grants.
    $grant = $default['author'];
    $grant['gid'] = $node->getOwnerId();
    $grant['realm'] = 'nodeaccess_author';
    // Include author grant even with all values FALSE, it may be
    // needed to overwrite an older value.
    $grants[] = $grant;
  }
  $updated_grants = [];
  foreach ($grants as $id => $grant) {
    // Merge missing default grant keys.
    $updated_grants[] = $grants[$id] + $grant_defaults;
  }

  return $updated_grants;
}

/**
 * Implements hook_node_grants().
 */
function nodeaccess_node_grants(AccountInterface $account, $op) {
  $config = \Drupal::configFactory()->get('nodeaccess.settings');
  $role_map = $config->get('role_map');
  $role_map = array_flip($role_map);
  $roles = $account->getRoles();

  $rids = [];
  foreach ($roles as $role) {
    $rids[] = $role_map[$role];
  }

  return [
    'nodeaccess_rid' => $rids,
    'nodeaccess_uid' => [$account->id()],
    'nodeaccess_author' => [$account->id()],
  ];
}

/**
 * Implements hook_entity_update().
 */
function nodeaccess_entity_update(EntityInterface $entity) {
  $config = \Drupal::configFactory()->getEditable('nodeaccess.settings');

  if ($entity instanceof RoleInterface) {
    /**
     * We use to update our aliases here, but in the new version of nodeaccess
     * we're not using separate aliases. Leaving this function here in the event
     * we need it later, but the TODO here is to remove it if it is not necessary.
     */
  }
}

/**
 * Implements hook_entity_insert().
 */
function nodeaccess_entity_insert(EntityInterface $entity) {
  $config = \Drupal::configFactory()->getEditable('nodeaccess.settings');
  if ($entity instanceof RoleInterface) {
    $roles_gids = array_flip($config->get('role_map'));
    $roles_gids[] = $entity->id();
    $config->set('role_map', array_flip($roles_gids));
    $config->save();
  }
}

/**
 * Implements hook_entity_delete().
 */
function nodeaccess_entity_delete(EntityInterface $entity) {
  $config = \Drupal::configFactory()->getEditable('nodeaccess.settings');

  if ($entity instanceof RoleInterface) {
    $roles_gids = $config->get('role_map');
    unset($roles_gids[$entity->id()]);
    $config->set('role_map', $roles_gids);
    $config->save();
  }
}

/**
 * Implements hook_node_delete().
 */
function nodeaccess_node_delete(EntityInterface $node) {
  // Deleting node, delete related permissions.
  $q = $db->delete('nodeaccess')
    ->condition('nid', $values['nid'])
    ->execute();
  $q = $db->delete('nodeaccess_nodes_enabled')
    ->condition('nid', $values['nid'])
    ->execute();
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function nodeaccess_node_type_delete(NodeTypeInterface $type) {
  $config = \Drupal::configFactory()->getEditable('nodeaccess.settings');
  $allowed_types = $config->get('allowed_types');
  unset($allowed_types[$type->id()]);
  $config->clear($type->id())
    ->set('allowed_types', $allowed_types)
    ->save();
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function nodeaccess_node_type_insert(NodeTypeInterface $type) {
  $config = \Drupal::configFactory()->getEditable('nodeaccess.settings');

  // New node type, default to whatever is set for access content permission.
  $role_perms = user_role_permissions([RoleInterface::ANONYMOUS_ID, RoleInterface::AUTHENTICATED_ID]);
  $anonymous_access = (int) in_array('access content', $role_perms[RoleInterface::ANONYMOUS_ID]);
  $authenticated_access = (int) in_array('access content', $role_perms[RoleInterface::AUTHENTICATED_ID]);
  $grants[RoleInterface::ANONYMOUS_ID] = [
    'grant_view' => $anonymous_access,
    'grant_update' => 0,
    'grant_delete' => 0,
  ];
  $grants[RoleInterface::AUTHENTICATED_ID] = [
    'grant_view' => $authenticated_access,
    'grant_update' => 0,
    'grant_delete' => 0,
  ];
  $grants['author'] = [
    'grant_view' => 0,
    'grant_update' => 0,
    'grant_delete' => 0,
  ];
  $allowed_types = $config->get('allowed_types');
  $allowed_types[$type->id()] = 0;
  $config->set($type->id(), $grants)
    ->set('allowed_types', $allowed_types)
    ->save();
  node_access_needs_rebuild(TRUE);
}

/**
 * Implements hook_node_access().
 */
function nodeaccess_node_access(NodeInterface $node, $op, $account) {
  $settings = \Drupal::configFactory()->get('nodeaccess.settings');
  $role_map = $settings->get('role_map');
  $access = NULL;

  switch ($op) {
    case 'update':
    case 'delete':
      $access = AccessResult::forbidden();
      // We check if the role has particular access to this node.
      $grants = _nodeaccess_get_grants($node);
      $uid = $account->id();

      // If the node belongs to a deleted user.
      if ($uid == 0 && $node->getOwnerId() == 0) {
        // We check if the role has particular access to this node.
        $anonymous_rid = $role_map[RoleInterface::ANONYMOUS_ID];
        // If anonymous has rights to this node, we allow them.
        if ((isset($grants['rid'][$anonymous_rid]['grant_update']) && $op == 'update') ||
           (isset($grants['rid'][$anonymous_rid]['grant_delete']) && $op == 'delete')) {
           $access = AccessResult::allowed();
         }
         else {
           $access = AccessResult::forbidden();
        }
      }
      else {
        if (!empty($grants['uid']) && array_key_exists($uid, $grants['uid'])) {
          if ((isset($grants['uid'][$uid]['grant_update']) && $op == 'update') ||
              (isset($grants['uid'][$uid]['grant_delete']) && $op == 'delete')) {
            $access = AccessResult::allowed();
          }
        }
        else if (!empty($grants['rid'])) {
          $access = AccessResult::forbidden();
          foreach ($account->getRoles() as $rid) {
            $rid = $role_map[$rid];
            if ((isset($grants['rid'][$rid]['grant_update']) && $op == 'update') ||
                (isset($grants['rid'][$rid]['grant_delete']) && $op == 'delete')) {
              $access = AccessResult::allowed();
            }
          }
        }
        else {
          $access = AccessResult::neutral();
        }
      }

      $access->cachePerUser();
      break;

    default:
      break;
  }
  return $access;
}

/**
 * Return the grants applied to a node object used for Grant form.
 *
 * @return array
 *   An array of grants with keys 'rid' for roles and 'uid' for users.
 */
function _nodeaccess_get_grants($node) {
  $grants = [];
  $db = \Drupal::database();

  // Load all roles.
  $result = $db->select('nodeaccess', 'na')
    ->fields('na', ['gid', 'grant_view', 'grant_update', 'grant_delete'])
    ->condition('nid', $node->id(), '=')
    ->condition('realm', 'nodeaccess_rid', '=')
    ->execute()
    ->fetchAll();
  foreach ($result as $grant) {
    $grants['rid'][$grant->gid] = [
      'grant_view' => $grant->grant_view,
      'grant_update' => $grant->grant_update,
      'grant_delete' => $grant->grant_delete,
    ];
  }

  // Load users from node_access.
  $entries = $db->select('nodeaccess', 'n');
  $entries->join('users_field_data', 'ufd', 'ufd.uid = n.gid');
  $entries->fields('n', ['grant_view', 'grant_update', 'grant_delete']);
  $entries->fields('ufd', ['uid', 'name']);
  $entries->condition('n.nid', $node->id(), '=');
  $entries->condition('n.realm', 'nodeaccess_uid', '=');
  $entries->orderBy('ufd.name', 'ASC');
  $results = $entries->execute();

  foreach ($results as $account) {
    $grants['uid'][$account->uid] = [
      'name' => $account->name,
      'keep' => 1,
      'grant_view' => $account->grant_view,
      'grant_update' => $account->grant_update,
      'grant_delete' => $account->grant_delete,
    ];
  }
  return $grants;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Rationale:
 * In Drupal, if you give an authenticated user access to something, you basically give
 * all authenticated users access to it. Because every logged in user, regardless of
 * any other role, is authenticated. As such, if you elect to give authenticated users
 * access, you are giving acccess to all roles.
 *
 * The interface needs to reflect this so there is no confusion. So if a user opts to
 * grant access to the authenticated user, we will check the boxes on all roles except
 * anonymous.
 */
function nodeaccess_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $db = \Drupal::database();
  $roles = user_roles(FALSE, NULL);

  /**
   * Get the node id (entity id) from the form object. Now..... if there is no form object
   * then there will be no nid which indicates a new node which then means we will be using
   * our defaults. Which is all fine, but we need to make sure we defensively progra m for
   * it.
   */

  $formObject = $form_state->getBuildInfo();
  $nid = $formObject['callback_object']->getEntity()->id();

  /**
   * We have to load our node type here to use our default third party settings if needed.
   * To get this, we need to get the bundhe from our $form variable. Need to be able to
   * dynamically check in the event there are some customizations in other hooks.
   */
  $bundle = NULL;
  foreach ($form['#process'] as $key => $process) {
    if (is_array($process)) {
      foreach ($process as $proc) {
        if ($proc instanceOf Drupal\Core\Entity\Entity\EntityFormDisplay) {
          $bundle = $proc->get('bundle');
        }
      }
    }
  }

  $type = NULL;
  if (!empty($bundle)) {
    $type = NodeType::load($bundle);
  }

  /**
   * If nodeaccess is not enabled for this node type, then do not put the tab
   * on the form.
   */
  $enabled = $type->getThirdPartySetting('nodeaccess', 'nodeaccess_grant_tab_' . $bundle, FALSE);
  if ($enabled === FALSE) {
    return;
  }

  $form['nodeaccess'] = [
    '#type' => 'details',
    '#title' => t('Nodeaccess'),
    '#group' => 'advanced',
    '#attributes' => [
      'class' => ['node-form-nodeaccess']
    ],
    '#attached' => [
      'library' => ['node/drupal.node'],
    ],
    '#weight' => 85,
    '#optional' => TRUE,
    '#open' => FALSE,
    'table' => [
      '#type' => 'table',
      '#header' => [
        t('Role'),
        t('View'),
        t('Edit'),
        t('Del'),
      ],
      '#weight' => 10,
      '#attached' => [
        'library' => [
          'nodeaccess/form-styling',
        ],
      ],
    ],
  ];
  $form['nodeaccess_enable'] = [
    '#type' => 'checkbox',
    '#title' => t('Engage nodeaccess control for this node'),
    '#group' => 'nodeaccess',
    '#weight' => 0,
  ];

  /**
   * Iterate through our roles and present the default option for each one. Include authors at
   * the bottom of the list.
   *
   * Rationale:
   * If there are no grants for a particular piece of content, then we should display
   * the defaults. Keep in mind, this does not mean if no grants are given, defaults
   * should only be displayed if no grant records exist for a given node. Default grants
   * do not take into consideration user-specific grants, although this is an edge case
   * because saving a user-specific grant should save grants for the current node 
   * as well.
   */
  $use_defaults = FALSE;
  if (!empty($nid)) {
    $entries = $db->select('nodeaccess', 'n')
      ->fields('n')
      ->condition('nid', $nid, '=')
      ->execute()
      ->fetchAll();
    $node_count = count($entries);
    if ($node_count < 1) {
      $use_defaults = TRUE;
    }
  }
  else {
    $use_defaults = TRUE;
  }

  $user_entries = [];
  foreach ($entries as $entry) {
    $entry = (array) $entry;
    if ($entry['realm'] == 'nodeaccess_uid') {
      $user_entries[$entry['gid']] = $entry;
    }
  }
  /**
   * If authenticated users are allowed nodeaccess, so are all roles not
   * named anonymous.
   */
  $allowed_roles = nodeaccess_get_allowed_roles();

  $i = 0;
  $permissions = ['view', 'update', 'delete'];
  foreach ($roles as $key => $role) {
    if ($allowed_roles[$key] !== TRUE) {
      continue;
    }

    foreach ($permissions as $permission) {
      $form['nodeaccess']['table'][$key][$bundle . '_' . $key] = [
        '#markup' => $role->label(),
      ];
      if ($type !== NULL && $use_defaults === TRUE) {
        $default_value = $type->getThirdPartySetting('nodeaccess', 'nodeaccess_' . $bundle . '_' . $key . '_' . $permission, FALSE);
      }
      elseif ($use_defaults === FALSE) {
        $form['nodeaccess_enable']['#default_value'] = TRUE;
        // Pull grants from our grants table.
        $config = \Drupal::configFactory()->getEditable('nodeaccess.settings');
        $roles_gids = $config->get('role_map');
        foreach ($entries as $entry) {
          $entry = (array) $entry;
          if ($roles_gids[$entry['gid']] == $key) {
            $default_value = $entry['grant_' . $permission];
            break;
          }
        }
      }
      else {
        $default_value = FALSE;
      }

      $form['nodeaccess']['table'][$key][$bundle . '_' . $key . '_' . $permission] = [
        '#type' => 'checkbox',
        '#default_value' => $default_value,
      ];
    }
    $i++;
  }

  // Display the authors we already have grants for.
  foreach ($user_entries as $gid => $entry) {
    $query = $db->select('users_field_data', 'ufd')
      ->fields('ufd', ['name'])
      ->condition('uid', $gid)
      ->execute();
    $ids = $query->fetchAssoc();

    $form['nodeaccess']['table']['existing_user-'.$gid]['name'] = [
      '#markup' => $ids['name'] . ' (remove)',
    ];
    foreach ($permissions as $permission) {
      $form['nodeaccess']['table']['existing_user-'.$gid][$gid . '-' . $permission] = [
        '#type' => 'checkbox',
        '#default_value' => $entry['grant_' . $permission],
      ];
    }
  }

  $form['nodeaccess']['table']['user'][$bundle . '_user'] = array(
    '#type' => 'textfield',
    '#size' => 30,
    '#maxlength' => 60,
    '#autocomplete_route_name' => 'nodeaccess.autocomplete.users',
    '#default_value' => $author,
  );
  foreach ($permissions as $permission) {
    $form['nodeaccess']['table']['user'][$bundle . '_user_' . $permission] = [
      '#type' => 'checkbox',
      '#default_value' => 0,
    ];
  }

  $form['bundle'] = [
    '#type' => 'hidden',
    '#default_value' => $bundle,
  ];

  foreach (array_keys($form['actions']) as $action) {
    if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
      $form['actions'][$action]['#submit'][] = 'nodeaccess_custom_entity_submit';
    }
  }
}

/**
 * Our custom submit hook as defined in nodeaccess_form_node_form_alter. This
 * is called after the content has already been saved to the database and the
 * node id is available for us to use.
 * 
 * @see nodeaccess_form_node_form_alter
 */
function nodeaccess_custom_entity_submit($form, FormStateInterface $form_state) {
  $allowed_roles = nodeaccess_get_allowed_roles();
  $db = \Drupal::database();
  $values = $form_state->getValues();
  $roles = user_roles(FALSE, NULL);
  $bundle = $values['bundle'];

  $config = \Drupal::configFactory()->getEditable('nodeaccess.settings');
  $roles_gids = $config->get('role_map');
  $roles_gids = array_flip($roles_gids);

  /**
   * We're going to re-write the access rules here, so clear out any that might
   * be there.
   */
  $q = $db->delete('nodeaccess')
    ->condition('nid', $values['nid'])
    ->execute();
  $q = $db->delete('nodeaccess_nodes_enabled')
    ->condition('nid', $values['nid'])
    ->execute();

  /**
   * Only do the rest if the nodeaccess checks are enabled for this particular node.
   */
  if ($values['nodeaccess_enable'] == 1) {
    $grants = [];
    $role_permissions = ['view', 'update', 'delete'];

    foreach ($values['table'] as $i => $permissions) {
      if ($allowed_roles[$i] == TRUE) {
        $grants[$i]['grant_view'] = (int) $values['table'][$i][$bundle . '_' . $i . '_view'];
        $grants[$i]['grant_update'] = (int) $values['table'][$i][$bundle . '_' . $i . '_update'];
        $grants[$i]['grant_delete'] = (int) $values['table'][$i][$bundle . '_' . $i . '_delete'];
      }
    }

    foreach ($grants as $key => $grant) {
      $db->insert('nodeaccess')
        ->fields([
          'nid' => $values['nid'],
          'gid' => $roles_gids[$key],
          'realm' => 'nodeaccess_rid',
          'grant_view' => $grant['grant_view'],
          'grant_update' => $grant['grant_update'],
          'grant_delete' => $grant['grant_delete'],
      ])
      ->execute();
    }

    /**
     * Update user specific access roles.
     */
    $grant = [];
    foreach ($values['table'] as $key => $value) {
      list ($existing_user, $gid) = explode('-', $key);
      if ($existing_user != 'existing_user') {
        continue;
      }

      foreach ($value as $combo => $permission) {
        list ($gid, $perm) = explode('-', $combo);
        if (empty($perm)) {
          continue;
        }
        $grant[$gid]['grant_' . $perm] = $permission;
      }
      foreach ($grant as $gid => $perm) {
        $db->insert('nodeaccess')
          ->fields([
            'nid' => $values['nid'],
            'gid' => $gid,
            'realm' => 'nodeaccess_uid',
            'grant_view' => (int) $perm['grant_view'],
            'grant_update' => (int) $perm['grant_update'],
            'grant_delete' => (int) $perm['grant_delete'],
          ])
          ->execute();
      }
      $grant = [];
    }

    /**
     * Check for new user grants. Make sure the uid we're getting matches the user in the text.
     */
    if (!empty($values['table']['user'][$bundle . '_user'])) {
      preg_match_all("/\[([^\]]*)\]/", $values['table']['user'][$bundle . '_user'], $matches);
      $uid = $matches[1][0];
      
      $username = str_replace(' [' . $uid . ']', '');
      $query = $db->select('users_field_data', 'ufd')
        ->fields('ufd', ['uid', 'name'])
        ->condition('name', $username)
        ->condition('uid', $uid)
        ->execute();
      $ids = $query->fetchAll();
      if (count($ids) == 1) {
        $db->insert('nodeaccess')
          ->fields([
            'nid' => $values['nid'],
            'gid' => $uid,
            'realm' => 'nodeaccess_uid',
            'grant_view' => (int) $values['table']['user'][$bundle . '_user_view'],
            'grant_update' => (int) $values['table']['user'][$bundle . '_user_update'],
            'grant_delete' => (int) $values['table']['user'][$bundle . '_user_delete'],
        ])
        ->execute();
      }
      else {
        \Drupal::messenger()->addError(t('The user-specific permissions could not be assigned.'));
      }
    }

    $db->insert('nodeaccess_nodes_enabled')
      ->fields([
        'nid' => $values['nid'],
      ])
      ->execute();
  }
  $node = Node::load($values['nid']);
  \Drupal::entityTypeManager()->getAccessControlHandler('node')->acquireGrants($node);

  $tags = ['node:' . $node->id()];
  Cache::invalidateTags($tags);
  $node->save();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function nodeaccess_form_node_type_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $type = $form_state->getFormObject()->getEntity();
  $bundle = $form['type']['#default_value'];
  $form['nodeaccess'] = [
    '#type' => 'details',
    '#title' => t('Nodeaccess'),
    '#group' => 'additional_settings',
    '#weight' => 0,
  ];
  $form['nodeaccess']['enabled'] = [
    '#type' => 'checkbox',
    '#title' => t('Show grant tab for this node type.'),
    '#default_value' => $type->getThirdPartySetting('nodeaccess', 'nodeaccess_grant_tab_' . $bundle, FALSE),
  ];
  $form['nodeaccess']['table'] = [
    '#type' => 'table',
    '#caption' => t(''),
    '#header' => [
      t('Role'),
      t('View'),
      t('Edit'),
      t('Delete'),
    ],
    '#id' => 'nodeaccess-table',
    '#attached' => [
      'library' => [
        'nodeaccess/form-styling',
      ],
    ],
  ];

  /**
   * Iterate through our roles and present the default option for each one. Include authors at
   * the bottom of the list.
   */
  $i = 0;
  $permissions = ['view', 'update', 'delete'];
  $roles = user_roles(FALSE, NULL);
  foreach ($roles as $key => $role) {
    foreach ($permissions as $permission) {
      $form['nodeaccess']['table'][$i][$bundle . '_' . $key] = [
        '#markup' => $role->label(),
      ];
      $form['nodeaccess']['table'][$i][$bundle . '_' . $key . '_' . $permission] = [
        '#type' => 'checkbox',
        '#default_value' => $type->getThirdPartySetting('nodeaccess', 'nodeaccess_' . $bundle . '_' . $key . '_' . $permission, FALSE),
      ];
    }
    $i++;
  }

  foreach ($permissions as $permission) {
    $form['nodeaccess']['table'][$i]['author'] = [
      '#markup' => 'Node Author (Not editable per node.)',
    ];
    $form['nodeaccess']['table'][$i]['author']['attributes']['class'][] = 'test';
    $form['nodeaccess']['table'][$i][$bundle . '_author_' . $permission] = [
      '#type' => 'checkbox',
      '#default_value' => $type->getThirdPartySetting('nodeaccess', 'nodeaccess_' . $bundle . '_' . 'author_' . $permission, FALSE),
    ];
  }
  $form['#entity_builders'][] = 'nodeaccess_node_type_edit_form_builder';
}

/**
 * Entity builder for the nodeaccess permissions form.
 *
 * @see nodeaccess_form_node_type_edit_form_alter()
 */
function nodeaccess_node_type_edit_form_builder($entity_type, NodeTypeInterface $type, &$form, FormStateInterface $form_state) {
  $permission_definitions = $form_state->getValue('table');
  $bundle = $form_state->getValue('type');
  $type->setThirdPartySetting('nodeaccess', 'nodeaccess_grant_tab_' . $bundle, $form_state->getValue('enabled'));

  foreach ($permission_definitions as $key => $permissions) {
    foreach ($permissions as $permission => $enabled) {
      $type->setThirdPartySetting('nodeaccess', 'nodeaccess_' . $permission, $enabled);
    }
  }
  $renderCache = \Drupal::service('cache.render');
  $renderCache->invalidateAll();
}

/**
 * Get the roles that are permitted per node content.
 */
function nodeaccess_get_allowed_roles() {
  $roles = user_roles(FALSE, NULL);
  $all_anonymous_roles = FALSE;
  $authenticated = $roles['authenticated'];
  if ($authenticated->hasPermission('include in nodeaccess grants')) {
    $all_non_anonymous_roles = TRUE;
  }

  /** Determine which roles have nodeaccess. */
  $allowed_roles = [];
  foreach ($roles as $id => $role) {
    if ($all_non_anonymous_roles === TRUE) {
      $allowed_roles[$id] = TRUE;
    }
    else {
      if ($role->hasPermission('include in nodeaccess grants')) {
        $allowed_roles[$id] = TRUE;
      }
    }
  }
  return $allowed_roles;
}