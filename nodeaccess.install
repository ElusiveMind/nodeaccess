<?php

/**
 * @file
 * Install/uninstall functions for Nodeaccess.
 */

use Drupal\node\Entity\NodeType;

/**
 * Implements hook_install().
 */
function nodeaccess_install() {
  $config = \Drupal::configFactory()->getEditable('nodeaccess.settings');
  $roles = user_roles(FALSE, NULL);

  /**
   * Set up an ID for our roles that way we can use them with our various node_access
   * grants (our nodeaccess ones too!). This becomes the gid for role based access
   * permissions.
   */
  $i = 0;
  $roles_gids = [];
  foreach ($roles as $role_id => $role) {
    $roles_gids[$role_id] = $i;
    $i++;
  }
  $config->set('role_map', array_flip($roles_gids));
  $config->save();

  /**
   * Define the default grants for each role based on what is set up in our existing
   * permissions. Note that nodeaccess will not be enabled by default for individual
   * nodes, so we are just setting up defaults, not assigning them to each node.
   */
  $role_perms = user_role_permissions(['anonymous', 'authenticated']);

  foreach (NodeType::loadMultiple() as $type => $bundle) {
    $bundle->setThirdPartySetting('nodeaccess', 'nodeaccess_' . $type . '_' . 'anonymous_view', (int) in_array('access content', $role_perms['anonymous']));
    $bundle->setThirdPartySetting('nodeaccess', 'nodeaccess_' . $type . '_' . 'authenticated_view', (int) in_array('access content', $role_perms['authenticated']));

    $edit_perm = 'edit any ' . $type . ' content';
    $bundle->setThirdPartySetting('nodeaccess', 'nodeaccess_' . $type . '_' . 'anonymous_update', (int) in_array($edit_perm, $role_perms['anonymous']));
    $bundle->setThirdPartySetting('nodeaccess', 'nodeaccess_' . $type . '_' . 'authenticated_update', (int) in_array($edit_perm, $role_perms['authenticated']));

    $delete_perm = 'delete any ' . $type . ' content';
    $bundle->setThirdPartySetting('nodeaccess', 'nodeaccess_' . $type . '_' . 'anonymous_delete', (int) in_array($delete_perm, $role_perms['anonymous']));
    $bundle->setThirdPartySetting('nodeaccess', 'nodeaccess_' . $type . '_' . 'authenticated_delete', (int) in_array($delete_perm, $role_perms['authenticated']));

    $bundle->setThirdPartySetting('nodeaccess', 'nodeaccess_' . $type . '_' . 'author_view', 1);
    $bundle->setThirdPartySetting('nodeaccess', 'nodeaccess_' . $type . '_' . 'author_update', 1);
    $bundle->setThirdPartySetting('nodeaccess', 'nodeaccess_' . $type . '_' . 'author_delete', 1);
    $bundle->save();
  }
}

/**
 * Implements hook_schema().
 */
function nodeaccess_schema() {
  $schema = [];
  $schema['nodeaccess_nodes_enabled'] = [
    'fields' => [
      'nid' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ],
    ],
    'primary key' => ['nid'],
  ];

  $schema['nodeaccess'] = [
    'fields' => [
      'nid' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ],
      'gid' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ],
      'realm' => [
        'type' => 'varchar',
        'length' => 191,
        'not null' => TRUE,
        'default' => '',
      ],
      'grant_view'  => [
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ],
      'grant_update' => [
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ],
      'grant_delete' => [
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ],
    ],
    'primary key' => ['nid', 'gid', 'realm'],
  ];
  return $schema;
}
